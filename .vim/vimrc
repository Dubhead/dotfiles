" ~/.vimrc

"""" Vundle """"

source <sfile>:h/vundle-init.vim
filetype plugin on
filetype indent off

"""" language settings """"

let $LANG = "en_US.UTF-8"
" language en_US.UTF-8
language C
set ambiwidth=double
set encoding=utf-8
" set fileencoding=utf-8
if has('iconv')
  set fileencodings=utf-8,cp932,iso-2022-jp,euc-jp
endif

"""" options """"

set autochdir
set autoindent
set backspace=indent,eol,start
" set backupdir=~/.vim_backup/,.,~/
set backupdir=/tmp,.,~/
set browsedir=buffer
set cedit=<Esc>
set cinoptions=:0,l1,g0,N-s,(s
" set directory=c:\\tmp,.
set clipboard+=unnamed
set complete=.,b,t
set directory=/tmp,.,~/
set nofoldenable
set foldmethod=indent
set formatoptions=
" set grepprg=internal
" set grepprg=/usr/bin/ack\ -H\ --column\ --nocolor\ --nogroup
set grepprg=/usr/bin/ag\ --nogroup\ --nocolor\ --column
set grepformat=%f:%l:%c:%m
set history=50
set hidden
set hlsearch
set incsearch
set isfname-==
set langmenu=none
set linebreak
set modeline
set nrformats=hex,alpha
set noruler
" set scrolloff=2
set secure
set sessionoptions=buffers,options,resize,winsize
set shiftround
set shiftwidth=4
set shortmess=aoOtI
set showbreak=>\
set noshowcmd
set showmatch
set noshowmode
" set splitbelow
set suffixes=.o,.orig,.pyc,.pyo,.beam,.class,.exe,.8,.di
set tags=./tags;
set tildeop
set viminfo=!,%,'0,/0,:0,<0,@0,f0,h    " '!' for mru.vim
set wildignore+=*.o,*/.git/*,*/.hg/*,*/.svn/*
set wildmode=list:longest
set winfixheight
set nowrapscan

"""" display """"

" these should be here, NOT in .gvimrc
" default: "agimrLtT" (GTK, Motif and Athena)
set guioptions-=m
set guioptions-=r
set guioptions-=L
set guioptions-=T
set guioptions+=cl

" syntax on
syntax enable
" colorscheme fine_blue
" colorscheme fruit
" colorscheme autumnleaf
colorscheme vc
" colorscheme delek

" Highlight redundant whitespaces.
highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/

" Highlight 'number' column.
highlight LineNr term=underline ctermbg=3 ctermfg=4 guifg=blue guibg=yellow

"""" maps """"

" Toggle read-only for local buffer.
map <C-Q> :silent setl invreadonly<CR>\|:setl readonly?<CR>

" Ctrl-L also clears searched-word hilighting.
noremap <C-L> :noh<CR>:lcd %:p:h<CR><C-L>

" B for braces
" inoremap <silent> <C-B> <END> {<ESC>:call setline(".", substitute(getline("."), "\\S\\zs\\s*\\%#", " ", ""))<CR>o}<ESC>O<C-T>
inoremap <silent> <C-B> <END>{<ESC>:call setline(".", substitute(getline("."), "\\S\\zs\\s*{", " {", ""))<CR>o}<ESC>O<C-T>

" make the last word UPPERCASE or Camelcase.  See :help gU
inoremap <M-u> <Esc>gUiw`]a
inoremap <M-c> <ESC>bgUllgue`^a

" Do :grep for the word under cursor.
nnoremap <F8> :grep -w <cword><CR>

" Save all modified, and run make.
map <F9> :silent wall<CR>\|:make<CR>

" QuickFix list navigation
map <C-N> :cnext<CR>
map <C-P> :cprev<CR>

" Alt-BackSpace to delete last word
inoremap <M-BS> <C-W>
noremap <M-BS> db

" taken from :help emacs-keys
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <Esc><C-B> <S-Left>
cnoremap <Esc><C-F> <S-Right>

" Search open parens.
nnoremap <silent> ) :<C-u>call search("\\((\\\\|\\[\\\\|{\\\\|<\\\\|「\\\\|『\\)\\zs")<CR>
nnoremap <silent> ( :<C-u>call search("\\((\\\\|\\[\\\\|{\\\\|<\\\\|「\\\\|『\\)\\zs", 'b')<CR>

" Go to the right-hand-side of an assignment.
noremap <silent> = 0:<C-u>call search("=")<CR>w

" Change currend word to yanked text.
" nnoremap <silent> cy ce<C-r>0<ESC>:let@/=@1<CR>:noh<CR>
" vnoremap <silent> cy c<C-r>0<ESC>:let@/=@1<CR>:noh<CR>
" nnoremap <silent> ciy ciw<C-r>0<ESC>:let@/=@1<CR>:noh<CR>

" split and join
nnoremap K h/[^ ]<cr>"zd$jyyP^v$h"zpJk:s/\v +$//<cr>:noh<cr>j^

"""" plugins """"

" manpage viewer: See :help Man
runtime ftplugin/man.vim
" map K <Leader>K

" QuickBuf http://www.vim.org/scripts/download_script.php?src_id=7198
let g:qb_hotkey = "_"

" tagbar.vim
let g:tagbar_left = 1
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" " mru.vim
" let MRU_Max_Entries = 30
" " let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*'
" let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*\|^/usr/include/\|ci-comment-'
" " let MRU_Window_Height = 16
" " let MRU_Use_Current_Window = 1
" " let MRU_Auto_Close = 0
" let MRU_Add_Menu = 0

" mark_tools.vim
" http://www.vim.org/scripts/script.php?script_id=2929
nmap <C-F2> <Plug>ToggleMarkAZ
nmap <F2> <Plug>NextMarkPos
nmap <S-F2> <Plug>PrevMarkPos
nmap <S-C-F2> <Plug>MarksLoc
" let toggle_marks_wrap_search = -1

" " CtrlP
" let g:ctrlp_map = '_'
let g:ctrlp_cmd = 'CtrlPMixed'
" " let g:ctrlp_by_filename = 1
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['.fslckout']
" let g:ctrlp_clear_cache_on_exit = 0
" " let g:ctrlp_default_input = 1

" snipMate
" We don't need the stock snippets.
let g:snippets_dir = "~/.vim/snippets/"

" smartinput
let g:smartinput_no_default_key_mappings = 1
source <sfile>:h/smartinput-defs.vim

"""" hooks """"

" always cd to the directory where the current file is at
"
" This is enough if you never edit network files:
" autocmd BufEnter * lcd %:p:h
"
" from Vim Online, Tip #370
" autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]://" | silent! lcd %:p:h | endif
"
" This is obsolete in ver6.2 -- use new option 'autochdir'.

autocmd QuickFixCmdPost [^l]* nested cwindow 8
autocmd QuickFixCmdPost l*    nested lwindow 8

" autocmd BufRead,BufNewFile *.{c,cpp,cc,h,go} inoremap <buffer> <expr> = Sae()

"""" filetypes """"

" C++
autocmd FileType cpp setl commentstring=//\ %s

" Python
autocmd FileType python setl expandtab
let python_highlight_all = 1    " See syntax/python.vim

" Go
" autocmd BufRead,BufNewFile *.go setfiletype go
autocmd FileType go
	\ setl noexpandtab shiftwidth=8|
	\ noremap <silent> g] :<C-u>call search("^\\(func\\\\|type\\)")<CR>|
	\ noremap <silent> g[ :<C-u>call search("^\\(func\\\\|type\\)", 'b')<CR>
" let g:gocode_gofmt_tabs=" -tabs=true "
" let g:gocode_gofmt_tabwidth=" -tabwidth=8 "
set runtimepath+=$GOROOT/misc/vim
set runtimepath+=/home/miura/Golang/src/github.com/nsf/gocode/vim

" Haskell
" let hs_highlight_delimiters = 1
" let hs_highlight_boolean = 1
" let hs_highlight_types = 1
" let hs_highlight_more_types = 1
" let hs_highlight_debug = 1
" let hs_allow_hash_operator = 1

" Vala http://live.gnome.org/Vala/Vim
" autocmd BufRead *.vala,*.vapi set efm=%f:%l.%c-%[%^:]%#:\ %t%[%^:]%#:\ %m
" au BufRead,BufNewFile *.vala,*.vapi setfiletype vala
" let vala_no_trail_space_error = 1
" let vala_no_tab_space_error = 1

" Mono C#
" autocmd FileType cs compiler mcs

" Scala
" au BufRead,BufNewFile *.scala set filetype=scala

" Fantom
" autocmd BufRead,BufNewFile *.fan set filetype=fan

" Java
" let java_highlight_all=1
" let java_highlight_debug=1
" let java_highlight_java_lang_ids=1
" let java_allow_cpp_keywords=1
" let java_space_errors=1
" let java_highlight_functions="style"
"
" Note: This sets 'shellpipe=2>', disabling the grep/quickfix feature.
" autocmd BufNewFile,BufRead *.java compiler javac

" ooc
" autocmd BufRead,BufNewFile *.ooc setfiletype ooc

" Pure
autocmd BufRead,BufNewFile *.pure setfiletype pure

" Nimrod
" autocmd BufRead,BufNewFile *.nim setfiletype nimrod

" Falcon
autocmd BufRead,BufNewFile *.fal setfiletype falcon

" Rust
autocmd FileType rust setl commentstring=//\ %s

" eof
